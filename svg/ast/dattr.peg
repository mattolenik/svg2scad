{
package ast
import (
    "github.com/mattolenik/svg2scad/std"
)
}

Path <- _ seq:Seq {
    return &Path{Children: seq}, nil
}

Seq <- _ seq:(MoveSequence / Curve) {
    return seq, nil
}

MoveSequence <- _ move:Move _ rest:Seq* {
    if mv, ok := move.(*MoveTo); ok {
        mv.Children = rest.([]any)
        return mv, nil
    }
    return nil, nil
}

Curve <- cmds:Command+ {
    return &Curve{Children: std.TypedSlice[any](cmds)}, nil
}

Command <- _ val:(LineTo / CubicBezier / ClosePath) {
    return val, nil
}

Move <- MoveTo / MoveH / MoveV

MoveTo <- m _ coord:Coord {
    return &MoveTo{Coord: coord.( Coord)}, nil
}

MoveH <- h _ val:Number {
    return &MoveTo{Coord:  Coord{val.(float64), 0}}, nil
}

MoveV <- v _ val:Number {
    return &MoveTo{Coord:  Coord{0, val.(float64)}}, nil
}

LineTo <- l _ coord:Coord {
    // return &LineTo{Coord: coord.( Coord)}, nil
    return nil, fmt.Errorf("straight lines not implemented yet")
}

ClosePath <- z {
    return &ClosePath{}, nil
}

CubicBezier <- c _ c1:Coord _ c2:Coord _ c3:Coord {
    return &CubicBezier{Points: []Coord{c1.(Coord), c2.(Coord), c3.(Coord)}}, nil
}

QuadraticBezier <- q _ c1:Coord _ c2:Coord {
    // return &QuadraticBezier{Points: []Coord{c1.(Coord), c2.(Coord)}}, nil
    return nil, fmt.Errorf("quadratic curves not implemented yet")
}

Number <- val:number {
    return strconv.ParseFloat(string(c.text), 10)
}

Coord <- x:Number _ ','? _ y:Number {
    return  Coord{x.(float64), y.(float64)}, nil
}


number <- '-'? digit+ ('.' digit+)?

m <- 'M' / 'm'
l <- 'L' / 'l'
c <- 'C' / 'c'
z <- 'Z' / 'z'
h <- 'H' / 'h'
v <- 'V' / 'v'
q <- 'Q' / 'q'

digit <- [0-9]

_ "whitespace" <- [ \t\r\n]* {
    return nil, nil
}

_comma  <- ','
