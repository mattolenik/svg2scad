{
package ast
import (
    "unicode"
    "github.com/mattolenik/svg2scad/std"
    "github.com/mattolenik/svg2scad/std/strs"
)

func isRelative(text []byte) (bool, error) {
    return strs.IsLower(string(text)), nil
}
}

Path <- _ curve:Curve {
    return &Path{Children: curve}, nil
}

Seq <- _ seq:(Curve) {
    return seq, nil
}

Curve <- cmds:Command+ {
    return CommandList(std.TypedSlice[any](cmds)), nil
}

Command <- _ val:(Move / LineTo / Bezier / ClosePath) {
    return val, nil
}

Move <- MoveTo / MoveH / MoveV

MoveTo <- rel:move _ coord:Coord {
    return &MoveTo{Coord: coord.(Coord), Relative: rel.(bool)}, nil
}

MoveH <- rel:moveh _ val:Number {
    return &MoveTo{Coord: Coord{val.(float64), 0}, Relative: rel.(bool)}, nil
}

MoveV <- rel:movev _ val:Number {
    return &MoveTo{Coord: Coord{0, val.(float64)}, Relative: rel.(bool)}, nil
}

LineTo <- rel:lineto _ coord:Coord {
    return &LineTo{Coord: coord.(Coord), Relative: rel.(bool)}, nil
}

ClosePath <- val:('Z' / 'z') {
    return &ClosePath{}, nil
}

Bezier <- CubicBezier / QuadraticBezier

CubicBezier <- rel:curve _ c1:Coord _ c2:Coord _ c3:Coord {
    return &CubicBezier{Points: []Coord{c1.(Coord), c2.(Coord), c3.(Coord)}, Relative: rel.(bool)}, nil
}

QuadraticBezier <- qcurve _ c1:Coord _ c2:Coord {
    // return &QuadraticBezier{Points: []Coord{c1.(Coord), c2.(Coord)}}, nil
    return nil, fmt.Errorf("quadratic curves not implemented yet")
}

Coord <- x:Number _ ','? _ y:Number {
    return Coord{x.(float64), y.(float64)}, nil
}


Number <- val:number {
    return strconv.ParseFloat(string(c.text), 10)
}

number <- '-'? digit+ ('.' digit+)?

move <- val:('M' / 'm') { return isRelative(c.text) }

lineto <- val:('L' / 'l') { return isRelative(c.text) }

curve <- val:('C' / 'c') { return isRelative(c.text) }

moveh <- val:('H' / 'h') { return isRelative(c.text) }

movev <- val:('V' / 'v') { return isRelative(c.text) }

qcurve <- val:('Q' / 'q') { return isRelative(c.text) }

digit <- [0-9]

_ "whitespace" <- [ \t\r\n]* {
    return nil, nil
}
